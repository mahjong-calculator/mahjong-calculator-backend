from typing import Any

import believe
import pytest
from fastapi.testclient import TestClient
from httpx import Response
from starlette.status import HTTP_200_OK, HTTP_400_BAD_REQUEST


class TestGetMahjongTilesController:

    @pytest.fixture(autouse=True)
    def apply_client(self, mock_client: TestClient):
        self.client = mock_client

    def trigger_run(self, params: dict[str, Any]) -> Response:
        return self.client.get("/tiles", params=params)

    def test_japanese_mahjong_normal(self):
        params = {"mahjong_type": "japanese", "mahjong_branch": "normal"}
        res = self.trigger_run(params)

        assert res.status_code == HTTP_200_OK
        assert res.json() == believe.AnyOrder(
            [
                "1m",
                "1m",
                "1m",
                "1m",
                "2m",
                "2m",
                "2m",
                "2m",
                "3m",
                "3m",
                "3m",
                "3m",
                "4m",
                "4m",
                "4m",
                "4m",
                "5md",
                "5m",
                "5m",
                "5m",
                "6m",
                "6m",
                "6m",
                "6m",
                "7m",
                "7m",
                "7m",
                "7m",
                "8m",
                "8m",
                "8m",
                "8m",
                "9m",
                "9m",
                "9m",
                "9m",
                "1p",
                "1p",
                "1p",
                "1p",
                "2p",
                "2p",
                "2p",
                "2p",
                "3p",
                "3p",
                "3p",
                "3p",
                "4p",
                "4p",
                "4p",
                "4p",
                "5pd",
                "5p",
                "5p",
                "5p",
                "6p",
                "6p",
                "6p",
                "6p",
                "7p",
                "7p",
                "7p",
                "7p",
                "8p",
                "8p",
                "8p",
                "8p",
                "9p",
                "9p",
                "9p",
                "9p",
                "1s",
                "1s",
                "1s",
                "1s",
                "2s",
                "2s",
                "2s",
                "2s",
                "3s",
                "3s",
                "3s",
                "3s",
                "4s",
                "4s",
                "4s",
                "4s",
                "5sd",
                "5s",
                "5s",
                "5s",
                "6s",
                "6s",
                "6s",
                "6s",
                "7s",
                "7s",
                "7s",
                "7s",
                "8s",
                "8s",
                "8s",
                "8s",
                "9s",
                "9s",
                "9s",
                "9s",
                "E",
                "E",
                "E",
                "E",
                "S",
                "S",
                "S",
                "S",
                "W",
                "W",
                "W",
                "W",
                "N",
                "N",
                "N",
                "N",
                "R",
                "R",
                "R",
                "R",
                "G",
                "G",
                "G",
                "G",
                "W",
                "W",
                "W",
                "W",
            ]
        )

    def test_japanese_mahjong_three_player(self):
        params = {"mahjong_type": "japanese", "mahjong_branch": "three_player"}
        res = self.trigger_run(params)

        assert res.status_code == HTTP_200_OK
        assert res.json() == believe.AnyOrder(
            [
                "1m",
                "1m",
                "1m",
                "1m",
                "9m",
                "9m",
                "9m",
                "9m",
                "1p",
                "1p",
                "1p",
                "1p",
                "2p",
                "2p",
                "2p",
                "2p",
                "3p",
                "3p",
                "3p",
                "3p",
                "4p",
                "4p",
                "4p",
                "4p",
                "5pd",
                "5p",
                "5p",
                "5p",
                "6p",
                "6p",
                "6p",
                "6p",
                "7p",
                "7p",
                "7p",
                "7p",
                "8p",
                "8p",
                "8p",
                "8p",
                "9p",
                "9p",
                "9p",
                "9p",
                "1s",
                "1s",
                "1s",
                "1s",
                "2s",
                "2s",
                "2s",
                "2s",
                "3s",
                "3s",
                "3s",
                "3s",
                "4s",
                "4s",
                "4s",
                "4s",
                "5sd",
                "5s",
                "5s",
                "5s",
                "6s",
                "6s",
                "6s",
                "6s",
                "7s",
                "7s",
                "7s",
                "7s",
                "8s",
                "8s",
                "8s",
                "8s",
                "9s",
                "9s",
                "9s",
                "9s",
                "E",
                "E",
                "E",
                "E",
                "S",
                "S",
                "S",
                "S",
                "W",
                "W",
                "W",
                "W",
                "N",
                "N",
                "N",
                "N",
                "R",
                "R",
                "R",
                "R",
                "G",
                "G",
                "G",
                "G",
                "W",
                "W",
                "W",
                "W",
            ]
        )

    def test_japanese_mahjong_wrong_branch(self):
        params = {"mahjong_type": "japanese", "mahjong_branch": "wrong_branch"}
        res = self.trigger_run(params)

        assert res.status_code == HTTP_400_BAD_REQUEST

    def test_taiwanese_mahjong(self):
        params = {"mahjong_type": "taiwanese"}
        res = self.trigger_run(params)

        assert res.status_code == HTTP_200_OK
        assert res.json() == believe.AnyOrder(
            [
                "1m",
                "1m",
                "1m",
                "1m",
                "2m",
                "2m",
                "2m",
                "2m",
                "3m",
                "3m",
                "3m",
                "3m",
                "4m",
                "4m",
                "4m",
                "4m",
                "5m",
                "5m",
                "5m",
                "5m",
                "6m",
                "6m",
                "6m",
                "6m",
                "7m",
                "7m",
                "7m",
                "7m",
                "8m",
                "8m",
                "8m",
                "8m",
                "9m",
                "9m",
                "9m",
                "9m",
                "1p",
                "1p",
                "1p",
                "1p",
                "2p",
                "2p",
                "2p",
                "2p",
                "3p",
                "3p",
                "3p",
                "3p",
                "4p",
                "4p",
                "4p",
                "4p",
                "5p",
                "5p",
                "5p",
                "5p",
                "6p",
                "6p",
                "6p",
                "6p",
                "7p",
                "7p",
                "7p",
                "7p",
                "8p",
                "8p",
                "8p",
                "8p",
                "9p",
                "9p",
                "9p",
                "9p",
                "1s",
                "1s",
                "1s",
                "1s",
                "2s",
                "2s",
                "2s",
                "2s",
                "3s",
                "3s",
                "3s",
                "3s",
                "4s",
                "4s",
                "4s",
                "4s",
                "5s",
                "5s",
                "5s",
                "5s",
                "6s",
                "6s",
                "6s",
                "6s",
                "7s",
                "7s",
                "7s",
                "7s",
                "8s",
                "8s",
                "8s",
                "8s",
                "9s",
                "9s",
                "9s",
                "9s",
                "E",
                "E",
                "E",
                "E",
                "S",
                "S",
                "S",
                "S",
                "W",
                "W",
                "W",
                "W",
                "N",
                "N",
                "N",
                "N",
                "R",
                "R",
                "R",
                "R",
                "G",
                "G",
                "G",
                "G",
                "W",
                "W",
                "W",
                "W",
                "Pl",
                "Or",
                "Ba",
                "Ch",
                "Sp",
                "Su",
                "Au",
                "Wi",
            ]
        )

    def test_wrong_type(self):
        params = {"mahjong_type": "wrong_type"}
        res = self.trigger_run(params)

        assert res.status_code == HTTP_400_BAD_REQUEST
